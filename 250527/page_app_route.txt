Next.js
Next + TS + Tailwind + Vercel 

1. Page Route
> 13버전
> pages 폴더 > 새로운 폴더 생성 > 페이지 라우팅
> 개별적 | 독립적으로 페이지 컴포넌트 별 레이아웃 설정 => getLayout()
> 사전 렌더링
1) SSR
2) SSG
3) ISR


2. App Route
> 14버전~
> app 폴더 > 새로운 폴더 생성 > 페이지 라우팅
> 개별적 | 독립적으로 페이지 컴포넌트 별 레이아웃 설정 => Route Group
> 사전 렌더링
1) Client Component
2) Server Component (query 값 안받아도 됌.)
- 페이지 구분 x

> Data Cache : fetch() 메서드 함수를 활용해서 백엔드 서버로부터 불러온 데이터를 Next.js
   서버에 거의 영구적으로 보관할 수 있게 해주는 기능 // 
> 굳이 불필요한 데이터 요청 수를 현저하게 줄여서 웹.앱 서비스의 기능을 향상

1) 만약, next.js에서 fetch()함수를 통해서 외부 데이터를 가져오는 상황일 때, 
별도의 데이터 캐시 옵션을 설정하지 않는다면, 기본 디폴트 옵션 설정은 캐시값을 저장하지 않도록 해준다

2) 만약, 의도적으로 데이터 캐시 기능을 사용하고 싶지 않다면, no-store

> Request Memoization 

1) 클라이언트로부터 요청이 들어온 요소가 있다면 해당 요소를 기억한 상태에서 만약 동일한
   요청이 또 들어온다면 해당 기억 메모리에서 값을 찾아와서 전달해준다.

Data cache 
> 거의 영구적

Request Memoization
> 영구적이지 않음 

> Full Route Cache
Next.js 서버측에서 빌드 타임에 특정페이지의 렌더링 결과를 캐싱하는 기능
어떤 컴포넌트 페이지에 사용될지?
- 페이지 컴포넌트에 한해서 구분해야한다.

1) 정적 static 페이지 : Full Route Cache 적용

2) 동적 dynamic 페이지
> 특정 페이지가 접속 요청을 받을 때마다 무언가의 변화가 생기거나 혹은 데이터가 다라질 경우

1) Route Segment Option
- 특정 페이지 그룹을 동,정적으로 할지를 강제하는 옵션

> 지금까지 학습한 내용들은 모두 Server 내 데이터를 효율적으로 관리하기 위한 목적을
   공통적으로 가지고 있음

ㅡㅡㅡㅡㅡ
> Client Router Cache
: 브라우저에 저장되는 캐시 | 
페이지 이동을 효율적으로 진행하기 위해서 페이지의 데이터를 브라우저 상에서 보관

ㅡㅡㅡㅡㅡ
동일하게 코드를 입력했으나, 정상적으로 화면에 출력x
스트리밍 기능: 불안정 // 버그가 아직 존재함
> 기존 캐시값이 남아있는 경우, 원하는 기능이 구현x
> 강제 캐시값 리셋 

스트리밍 : OTT 서비스 
> 1기가 영상: 1번에 다 송출
> 1기가 영상을 다 받기 전까지는 아무것도 못함
> 100메가 10번 나누기
> 200메가 20분
> 큰 용량의 동영상 들을 빠른 속도로 시청할 수 있도록 도와줌
> 메인 페이지 이미지 & 동영상
> 1) 한 번도 해당 컴포넌트를 열어본적 없는 컴퓨터

> 2) 각각의 개별적인 컨텐츠 (*이미지 혹은 동영상의 용량이 크다.)

페이지 스트리밍 기능을 구현하기 위해서 loading 컴포넌트 > 반드시 비동기 컴포넌트에서만 사용 가능!

loading > 컴포넌트 반드시 페이지 역할을 하는 컴포넌트들에게만 적용할 수 있음
> suspense로 감싸져있는 컴포넌트들에 한해서는 예외적으로 적용 가능
> 최초에 컴포넌트에 방문하는 시점에만 loading이 작동함
(*해당 페이지 내에서 단순히 쿼리스트링 값이 바뀌어지는 것만으로는 loading이 작동할 수 없음)

컴포넌틑 스트리밍

스켈레톤(Skeleton) UI

스켈레톤= 뼈대 // 어떤 특정 데이터를 fetching해서 찾아오는데 있어서 걸리는 시간동안
                        해당 데이터로 유추할 수 있는 UI 뼈대를 미리 보여줌으로 인해서 
                        데이터의 형식을 알 수 있게 해준다.

NPM > react-loading-skeleton (React용)

에러 핸들링
> Next.js로 만든 웹.앱 페이지 > 에러발생