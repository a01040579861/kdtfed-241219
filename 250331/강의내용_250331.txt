1.Class : 
- 비슷한 유형의 객체가 반복적으로 생성되어야 하는 경우 발생 => 매번 비효율적으로 코드를 생성?
- 공통속성을 가지고 있는 하나의 프로토타입을 만들어놓고 필요할 때마다 붕어빵 찍어내듯이 사용할 수 있도록 하기 위해서 클래스

2.타입 스크립트
- 클래스 : 만약 생성자 함수를 통해서 선택적 프로퍼티 형식으로 값을 사용하려면, 필드 및 생성자함수 내 매개변수 공간에 옵셔널 프로퍼티(?) 적용 필수

- 클래스 = 하나의 타입으로서 활용가능!!!!

- 객체 타입 => type // interface // class

- 접근제어자!!!
> 클래스를 통해서 생성된 인스턴스 객체 내 속성값을 제어할 수 있는 범위를 설정하고자 만들어진 기능!!!!

> public : 모든 범위 (*클래스 내.외 모두 포함)에서 속성값 접근
- 디폴트 값처럼 사용됨
> private : 클래스 내부에서만 속성값 접근
> protected : 클래스 내부 | 상속받은 클래스 내부에서만 접근

> 접근제어자를 생성자함수 내 매개변수에 사용하면, 필드값 생략가능하며, 심지어 this객체를 활용해서 속성설정 역시 생략 가능!

> 타입스크랩트 내 클래스 상속은 extends!!!!
> 객체를 선언할 때, 전문적으로 객체의 타입으로 설정할 수 있도록 도와주는 Instance 타입을 활용해서 클래스를 선언할 수도 있음!!!

> implements 명령어를 사용하면, 인스턴스로 지정해놓은 타입을 반드시 가지고 있는 인스턴스 객체를 생성할 수 있음!!!!

*제네릭 타입!!!!!
> Generic : 일반적인, 보통의
> General Hospital => 종합병원
> 제네릭 타입을 사용해야하는 이유 : 지금까지 학습한 타입별칭, 인터페이스, 원시타입, 클래스 등의 다양한 타입을 적재적소에 상황에 맞춰서 사용할 수 있게 도와줌!!!!

*제네릭 함수
imperative-sum : 명령형 방식으로 무언가를 더하는 코드를 프로그래밍
declarative-sum.ts : 선언형 방식으로 무언가를 더하는 코드를 프로그래밍

*제네릭 타입별칭

*제네릭 인터페이스

*제네릭 클래스




