1. 변수

2. 자료형

3. 형변환

4. 연산자

5. 실행컨텍스트
1) variableEnvironment
2) lexicalEnvironment
- recordEnvironment
- outerEnvironmentReference
3) thisBinding

> scope // scopechain
* this 객체

6. 제어문
> 조건문 : 어떤 조건에 부합한지, 부합하지 않은지의 대한 실행시킬 실행 명령을 별도로 관리하는 것
> 조건문이 실행되기 위해서는 문법 필요 // 조건식 & 실행문
- if문 : 만약 ~라면
if (조건식) {실행문}
- if ~ else문 : 만약 ~라면, 또한 만약 ~아니라면

if 문 중괄호 사용/미사용 가능한 이유
전통적으로 프로그래밍 언어 2가지 부류로 나누기
실행문 지향언어 vs 표현식 지향언어
대부분의 프로그래밍 언어 = 실행문 지향언어이다.
JS : C언어 & JAVA의 객체지향언어를 따라가는 언어이다.
함수 선언, 호출 => 로컬 컴퓨터 CPU 실행 => 실행된 결과를 개발자에게 보여주지 않는다.(단 return이 있다면 반환)

표현식 지향언어 => 루비 // 코틀린
javascript => 실행문 & 표현식 모두 사용할 수 있는 언어 => 다중 패러다임 언어

- else if문 : if 혹은 else 와 조건식을 제공하고자 할 때

- switch문 : 여러가지 선택지를 제공하고, 해당 선택지 가운데서 어떤 한가지를 선택했을 때 실행, 결과값 도출!

- 삼항조건연산문

Iterable 객체 & 반복문을 지배하는자가 JS의 중급단계를 잘하게 된다.
어떤 자료구조가 현 문제를 해결하는데 가장 효율/ 시간복잡도 => 현 자료구조 및 알고리즘이 해당문제를 해결하는데 걸리는 시간
- 빅오 (최대로 걸리는 시간)
- 빅세타 (중간정도 걸리는 시간)
- 빅오메가 (최소로 걸리는 시간)

> 반복문 : 초기값 => 조건문 => 반복문실행 => 증감문 =>조건문 =>반복문실행
for(초기값; 조건식; 증감문) { *순서 : 초기값 => 조건 => 반복문실행 => 증감 =>조건 =>반복문실행 }

- foreach

>함수 안에 함수는 callback 함수!!!